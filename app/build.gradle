plugins {
    id 'com.android.application'
}

android {
    signingConfigs {
        release {
            keyAlias "ara"
            keyPassword "ara@!2021"
            storeFile file("../ara.jks")
            storePassword "ara@!2021"
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }

    compileSdk 31

    defaultConfig {
        applicationId "com.ara.wanandroid"
        minSdk 23
        targetSdk 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        //路由配置
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }

        multiDexEnabled true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    //开启dataBinding
    dataBinding {
        enabled true
    }

    //文件输出
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            //获取当前模式debug或release
            def buildType = variant.buildType.name
            if (buildType == "debug") return //放开as直接运行会安装不了Apk
            //渠道名称
            def buildName = ""
            variant.productFlavors.each { product ->
                buildName = product.name
            }
            // apk生成根目录
            variant.getPackageApplicationProvider().get().outputDirectory = new File("../out_apk")
            //这里修改apk文件名,格式为 module_buildType_version_time.apk
            def currentTime = new Date().format("YYYYMMdd_HHmmss", TimeZone.getTimeZone("GMT+08:00"))
            outputFileName = "XMVVM_${buildType}_${buildName}_${defaultConfig.versionName}_${currentTime}.apk"
        }
    }

    //通过build variant来管理渠道debug环境
    //正式打包在Edit configurations里面，添加Gradle：
    //Gradle project:选择app模块
    //Tasks：assemble 根据不同渠道命名：tasks可以为assembleRc、assembleBeta、assembleAlpha
    flavorDimensions "versionCode"
    productFlavors {
        //正式
        rc {
            /*** 正式API */
            buildConfigField 'String', 'BASE_URL', '"https://www.wanandroid.com/"'
            resValue "string", "app_name", "WanAndroid"
        }
        //测试
        beta {
            /*** API测试 */
            buildConfigField 'String', 'BASE_URL', '"https://www.wanandroid.com/"'
            resValue "string", "app_name", "WanAndroid测试"
        }
        //开发
        alpha {
            /*** API测试 */
            buildConfigField 'String', 'BASE_URL', '"https://www.wanandroid.com/"'
            resValue "string", "app_name", "WanAndroid开发"
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release//签名文件
        }

        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release//签名文件
        }
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    //路由
    //https://github.com/alibaba/ARouter
    implementation "com.alibaba:arouter-api:1.5.0"
    annotationProcessor "com.alibaba:arouter-compiler:1.2.2"

    implementation 'androidx.multidex:multidex:2.0.1'

    implementation project(path: ':lib-base')
    implementation project(path: ':lib-network')
    implementation project(path: ':lib-db')
    implementation project(path: ':lib-widget')
    implementation project(path: ':lib-project-common')
    implementation project(path: ':module-home')
    implementation project(path: ':module-mine')
    implementation project(path: ':module-project')
    implementation project(path: ':module-public')
    implementation project(path: ':module-square')
    implementation project(path: ':module-account')
    implementation project(path: ':module-web')

}